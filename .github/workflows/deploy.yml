name: Deploy main Pipeline Landing
on:
  push:
    branches:
      - main
permissions:
  packages: write
  contents: read
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Configurar el soporte para Buildx, que permite construir imágenes de manera optimizada

      - name: Cache Docker layers
        uses: actions/cache@v4  # Habilitar el caching para las capas de Docker y evitar que se reconstruyan siempre

        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2  # Hacer login en GHCR usando las credenciales de GitHub
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # Usar el token de GitHub para autenticar el login

      - name: Build and push Docker image
        run: |
          # Construir la imagen Docker usando el Dockerfile
          docker build -f Dockerfile -t ghcr.io/${{ github.repository }}:latest .

          # Subir la imagen construida a GHCR
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_CONECTIACAPITAL_HOST }}
          username: ${{ secrets.SERVER_CONECTIACAPITAL_USER }}
          key: ${{ secrets.SERVER_CONECTIACAPITAL_SSH }}
          port: 22
          script: |
            echo "Conexión exitosa a Hetzner"

            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME_CONECTIACAPITAL }} -p ${{ secrets.GHCR_TOKEN_CONECTIACAPITAL }}
            # echo "${{ secrets.GHCR_TOKEN_CONECTIACAPITAL }}" | docker login ghcr.io  -u "${{ secrets.GHCR_USERNAME_CONECTIACAPITAL }}" --password-stdin
            docker pull ghcr.io/${{ github.repository }}:latest
            docker stop andrescortes-dev || true
            docker rm andrescortes-dev || true


            # Crear volúmenes necesarios para Laravel
            docker volume rm andrescortes-dev_public || true
            docker volume andrescortes-dev_monolith_public || true
            docker volume andrescortes-dev_monolith_storage || true
            docker volume andrescortes-dev_monolith_storage_bootstrap || true

            docker run -d --name andrescortes-dev \
                         -e DB_HOST=${{ secrets.DB_PROD_CONECTIACAPITAL_HOST }} \
                         -e DB_DATABASE=db_prod_collaborators \
                         -e DB_USERNAME=${{ secrets.DB_PROD_CONECTIACAPITAL_USER }} \
                         -e DB_PASSWORD=${{ secrets.DB_PROD_CONECTIACAPITAL_PASSWORD }} \
                         -e DB_PORT=6543 \
                         -e DB_HOST_CONECTIA_CAPITAL_UELT=${{ secrets.DB_PROD_CONECTIACAPITAL_HOST }} \
                         -e DB_DATABASE_CONECTIA_CAPITAL_UELT=db_prod_uelt \
                         -e DB_USERNAME_CONECTIA_CAPITAL_UELT=${{ secrets.DB_PROD_CONECTIACAPITAL_USER }} \
                         -e DB_PASSWORD_CONECTIA_CAPITAL_UELT=${{ secrets.DB_PROD_CONECTIACAPITAL_PASSWORD }} \
                         -e DB_PORT_CONECTIA_CAPITAL_UELT=6543 \
                         -e APP_KEY=${{ secrets.PROD_APP_KEY}} \
                         -e APP_ENV=prod \
                         -e AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}} \
                         -e AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} \
                         -p 4004:9000 \
                         -v andrescortes-dev_public:/var/www/html/public \
                         -v andrescortes-dev_storage:/var/www/html/storage \
                         -v andrescortes-dev_storage_bootstrap:/var/www/html/bootstrap/cache \
                         ghcr.io/${{ github.repository }}:latest

            sudo mkdir -p /var/www/andrescortes-dev/public
            sudo umount /var/www/andrescortes-dev/public || true
            sudo mount --bind /var/lib/docker/volumes/andrescortes-dev_public/_data /var/www/andrescortes-dev/public
            docker image prune -f

